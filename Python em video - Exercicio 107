from moeda import Funcoes
import time

class Ultilizando_Modulos():
    def __init__(self):
        pass

    def recebendo_dados(self):
        while True:
            try:
                self.valor = float(input('Qual valor você quer manipular: R$'))

                if self.valor == "":
                    print("\x1b[35m!ERRO! O CAMPO ESTA VAZIO !ERRO!\x1b[0m")

                if isinstance(self.valor, float) or isinstance(self.valor, int):
                    break    

            except ValueError:
                print("\x1b[33m!ERRO! SÃO ACEITO APENAS CARACTERES NUMERICOS !ERRO!\x1b[0m")

        self.manipulando_valor()

    def manipulando_valor(self):
        aumentar = Funcoes.aumentar(self.valor)
        diminuir = Funcoes.diminuir(self.valor)
        dividir = Funcoes.metade(self.valor)
        dobrar = Funcoes.dobrar(self.valor)

        print("\x1b[35mCalculando valores...\x1b[0m")
        time.sleep(2)
        print(f"R${self.valor} com 10% de aumento se torna: {Funcoes.formatando_valor(aumentar)}")
        print(f"R${self.valor} com 10% de perca se torna: {Funcoes.formatando_valor(diminuir)}")
        print(f"R${self.valor} dividido por dois se torna: {Funcoes.formatando_valor(dividir)}")
        print(f"R${self.valor} multiplicado por dois se torna: {Funcoes.formatando_valor(dobrar)}")

        self.verificar_cliente()

    def verificar_cliente(self):
        while True:
            self.verificar = input('Você deseja verificar outro valor? [SIM/NAO]').lower()

            if self.verificar == "":
                print("\x1b[35m!ERRO! O CAMPO ESTA VAZIO !ERRO!\x1b[0m")

            if self.verificar in ['sim', 'nao']:
                break

            else:
                print("\x1b[35m!ERRO! SÃO ACEITO APENAS 'SIM' OU 'NAO !ERRO!\x1b[0m")        

        if self.verificar == 'sim':
            self.recebendo_dados()

        else:
            print("Obrigado por ultilizar nosso programa!")
            quit()            

if __name__ == "__main__":
    referencia = Ultilizando_Modulos()
    referencia.recebendo_dados()